{"version":3,"sources":["../browser/src/persistence/tree/ClosureSubjectExecutor.ts"],"names":[],"mappings":"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","file":"ClosureSubjectExecutor.js","sourcesContent":["import { Subject } from \"../Subject\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\nimport { CannotAttachTreeChildrenEntityError } from \"../../error/CannotAttachTreeChildrenEntityError\";\nimport { DeleteQueryBuilder } from \"../../query-builder/DeleteQueryBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap: ObjectLiteral = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(\n            (column) => {\n                closureJunctionInsertMap[column.databaseName] =\n                    subject.identifier;\n            }\n        );\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(\n            (column) => {\n                closureJunctionInsertMap[column.databaseName] =\n                    subject.identifier;\n            }\n        );\n\n        // insert values into the closure junction table\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .execute();\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(\n            subject.entity!\n        ); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n\n        if (parent) {\n            await this.insertClosureEntry(subject, subject.entity, parent);\n        }\n    }\n\n    /**\n     * Executes operations when subject is being updated.\n     */\n    async update(subject: Subject): Promise<void> {\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(\n            subject.entity!\n        ); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.entity;\n\n        let entity = subject.databaseEntity; // if entity was attached via parent\n        if (!entity) {\n            // if entity was attached via children\n            const chilrens = subject.metadata.treeChildrenRelation!.getEntityValue(\n                parent\n            );\n            if (!!chilrens)\n                entity = chilrens!.getEntityValue(parent).find((child: any) => {\n                    return Object.entries(subject.identifier!).every(\n                        ([key, value]) => child[key] === value\n                    );\n                });\n        }\n        // Exit if the parent or the entity where never set\n        if (entity === undefined || parent === undefined) {\n            return;\n        }\n\n        const oldParent = subject.metadata.treeParentRelation!.getEntityValue(\n            entity!\n        );\n        const oldParentId = subject.metadata.getEntityIdMap(oldParent);\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        // Exit if the new and old parents are the same\n        if (OrmUtils.compareIds(oldParentId, parentId)) {\n            return;\n        }\n\n        const escape = (alias: string) =>\n            this.queryRunner.connection.driver.escape(alias);\n        const previousParent = subject.metadata.treeParentRelation!.getEntityValue(\n            entity!\n        );\n        const hasPreviousParent = subject.metadata.primaryColumns.some(\n            (column) => column.getEntityValue(previousParent) != null\n        ); //Check for null or undefined (in case the parent is undefined)\n\n        if (hasPreviousParent) {\n            const closureTable = subject.metadata.closureJunctionTable;\n\n            const ancestorColumnNames = closureTable.ancestorColumns.map(\n                (column) => {\n                    return escape(column.databaseName);\n                }\n            );\n\n            const descendantColumnNames = closureTable.descendantColumns.map(\n                (column) => {\n                    return escape(column.databaseName);\n                }\n            );\n\n            // Delete logic\n            const createSubQuery = (\n                qb: DeleteQueryBuilder<any>,\n                alias: string\n            ) => {\n                const subAlias = `sub${alias}`;\n\n                const subSelect = qb\n                    .createQueryBuilder()\n                    .select(descendantColumnNames.join(\", \"))\n                    .from(closureTable.tablePath, subAlias);\n\n                // Create where conditions e.g. (WHERE \"subdescendant\".\"id_ancestor\" = :value_id)\n                for (const column of closureTable.ancestorColumns) {\n                    subSelect.andWhere(\n                        `${escape(subAlias)}.${escape(\n                            column.databaseName\n                        )} = :value_${column.referencedColumn!.databaseName}`\n                    );\n                }\n\n                return qb\n                    .createQueryBuilder()\n                    .select(descendantColumnNames.join(\", \"))\n                    .from(`(${subSelect.getQuery()})`, alias)\n                    .setParameters(subSelect.getParameters())\n                    .getQuery();\n            };\n\n            const parameters: ObjectLiteral = {};\n            for (const column of subject.metadata.primaryColumns) {\n                parameters[`value_${column.databaseName}`] = entity![\n                    column.databaseName\n                ];\n            }\n\n            await this.queryRunner.manager\n                .createQueryBuilder()\n                .delete()\n                .from(closureTable.tablePath)\n                .where(\n                    (qb) =>\n                        `(${descendantColumnNames.join(\n                            \", \"\n                        )}) IN (${createSubQuery(qb, \"descendant\")})`\n                )\n                .andWhere(\n                    (qb) =>\n                        `(${ancestorColumnNames.join(\n                            \", \"\n                        )}) NOT IN (${createSubQuery(qb, \"ancestor\")})`\n                )\n                .setParameters(parameters)\n                .execute();\n\n            /**\n             * Only insert new parent if it exits\n             *\n             * This only happens if the entity becomes a root entity\n             */\n            if (parent) {\n                // Insert logic\n                const queryParams: any[] = [];\n\n                const tableName = this.getTableName(closureTable.tablePath);\n                const superAlias = escape(\"supertree\");\n                const subAlias = escape(\"subtree\");\n\n                const select = [\n                    ...ancestorColumnNames.map(\n                        (columnName) => `${superAlias}.${columnName}`\n                    ),\n                    ...descendantColumnNames.map(\n                        (columnName) => `${subAlias}.${columnName}`\n                    ),\n                ];\n\n                const entityWhereCondition = subject.metadata.primaryColumns.map(\n                    (column) => {\n                        const columnName = escape(\n                            `${column.databaseName}_ancestor`\n                        );\n                        const entityId = column.getEntityValue(entity!);\n\n                        queryParams.push(entityId);\n                        const parameterName = this.queryRunner.connection.driver.createParameter(\n                            \"entity_\" + column.databaseName,\n                            queryParams.length - 1\n                        );\n                        return `${subAlias}.${columnName} = ${parameterName}`;\n                    }\n                );\n\n                const parentWhereCondition = subject.metadata.primaryColumns.map(\n                    (column) => {\n                        const columnName = escape(\n                            `${column.databaseName}_descendant`\n                        );\n                        const parentId = column.getEntityValue(parent);\n\n                        if (!parentId)\n                            throw new CannotAttachTreeChildrenEntityError(\n                                subject.metadata.name\n                            );\n\n                        queryParams.push(parentId);\n                        const parameterName = this.queryRunner.connection.driver.createParameter(\n                            \"parent_entity_\" + column.databaseName,\n                            queryParams.length - 1\n                        );\n                        return `${superAlias}.${columnName} = ${parameterName}`;\n                    }\n                );\n\n                await this.queryRunner.query(\n                    `INSERT INTO ${tableName} (${[\n                        ...ancestorColumnNames,\n                        ...descendantColumnNames,\n                    ].join(\", \")}) ` +\n                        `SELECT ${select.join(\", \")} ` +\n                        `FROM ${tableName} AS ${superAlias}, ${tableName} AS ${subAlias} ` +\n                        `WHERE ${[\n                            ...entityWhereCondition,\n                            ...parentWhereCondition,\n                        ].join(\" AND \")}`,\n                    queryParams\n                );\n            }\n        } else {\n            await this.insertClosureEntry(subject, entity, parent);\n        }\n    }\n\n    /**\n     * Inserts the rows into the closure table for a given entity\n     */\n    private async insertClosureEntry(\n        subject: Subject,\n        entity: any,\n        parent: any\n    ) {\n        const escape = (alias: string) =>\n            this.queryRunner.connection.driver.escape(alias);\n        const tableName = this.getTableName(\n            subject.metadata.closureJunctionTable.tablePath\n        );\n        const queryParams: any[] = [];\n\n        const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(\n            (column) => {\n                return escape(column.databaseName);\n            }\n        );\n        const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(\n            (column) => {\n                return escape(column.databaseName);\n            }\n        );\n        const childEntityIds1 = subject.metadata.primaryColumns.map(\n            (column) => {\n                queryParams.push(\n                    column.getEntityValue(\n                        subject.insertedValueSet\n                            ? subject.insertedValueSet\n                            : entity\n                    )\n                );\n                return this.queryRunner.connection.driver.createParameter(\n                    \"child_entity_\" + column.databaseName,\n                    queryParams.length - 1\n                );\n            }\n        );\n\n        const whereCondition = subject.metadata.primaryColumns.map((column) => {\n            const columnName = escape(column.databaseName + \"_descendant\");\n            const parentId = column.getEntityValue(parent);\n\n            if (!parentId)\n                throw new CannotAttachTreeChildrenEntityError(\n                    subject.metadata.name\n                );\n\n            queryParams.push(parentId);\n            const parameterName = this.queryRunner.connection.driver.createParameter(\n                \"parent_entity_\" + column.databaseName,\n                queryParams.length - 1\n            );\n            return `${columnName} = ${parameterName}`;\n        });\n\n        await this.queryRunner.query(\n            `INSERT INTO ${tableName} (${[\n                ...ancestorColumnNames,\n                ...descendantColumnNames,\n            ].join(\", \")}) ` +\n                `SELECT ${ancestorColumnNames.join(\n                    \", \"\n                )}, ${childEntityIds1.join(\n                    \", \"\n                )} FROM ${tableName} WHERE ${whereCondition.join(\" AND \")}`,\n            queryParams\n        );\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                return i === \"\"\n                    ? i\n                    : this.queryRunner.connection.driver.escape(i);\n            })\n            .join(\".\");\n    }\n}\n"],"sourceRoot":"../.."}